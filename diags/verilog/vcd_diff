#!/usr/bin/perl

# Name:         vcd_diff
# Author:       Trevor Williams  (phase1geo at gmail.com)
# Date:         7/5/2009
# Description:  Compares two VCD files removing Covered inlined coverage signals and glitches.
# Usage:        vcd_diff [-v] <inlined VCD filename> <VCD filename> [<mapping file>]

$VERBOSE = $ARGV[0];
$VNAME1  = $ARGV[1];
$VNAME2  = $ARGV[2];
$MAPNAME = $ARGV[3];

if( $VERBOSE eq "-v" ) {
  $VERBOSE = 1;
} else {
  $VERBOSE = 0;
  $VNAME1  = $ARGV[0];
  $VNAME2  = $ARGV[1];
  $MAPNAME = $ARGV[2];
}

if( ($VNAME1 eq "") || ($VNAME2 eq "") ) {
  &usage;
}

# If a mapping file was specified and it exists, read it in 
if( ($MAPNAME ne "") && -e $MAPNAME ) {
  &vcd_read_mapfile;
}

# Open both files for reading
open( VFILE1, "$VNAME1" ) || die "Can't open $VNAME1 for reading: $!\n";
open( VFILE2, "$VNAME2" ) || die "Can't open $VNAME2 for reading: $!\n";

# Read in the header information from both VCD files
&vcd_parse_def( 0 );
&vcd_parse_def( 1 );

# Verify differences
&vcd_diff_header;

while( ($timestep1 != -1) && ($timestep2 != -1) ) {
  if( $timestep1 <= $timestep2 ) {
    $timestep1 = &vcd_parse_sim( 0 );
  }
  if( $timestep2 <= $timestep1 ) {
    $timestep2 = &vcd_parse_sim( 1 );
  }
  &vcd_diff_timestep;
}

close( VFILE1 );
close( VFILE2 );

######  End of Main Subroutine  ######

sub usage {

  print "Usage:  vcd_diff [-v] <inlined VCD filename> <VCD filename> [<mapping file>]\n";
  die;

}

sub vcd_read_mapfile {

  if( $VERBOSE ) {
    print "Reading in mapping file $MAPNAME\n";
  }

  open( MFILE, "$MAPNAME" ) || die "Can't open $MAPNAME for reading: $!\n";

  while( <MFILE> ) {
    chomp;
    if( /SCOPE\s+(\S+)\s+(\S+)\s+(\S+)/ ) {
      $parent = $1;
      $scope1 = $2;
      $scope2 = $3;
      $map->{SCOPE}{$parent}{$scope1} = $scope2;
      $map->{SCOPE}{$parent}{$scope2} = $scope1;
    } elsif( /SIGNAL\s+(\S+)\s+(\S+)/ ) {
      $parent  = $1;
      $signal1 = $2;
      $signal2 = $3;
      $map->{SIGNAL}{$parent}{$signal1} = $signal2;
      $map->{SIGNAL}{$parent}{$signal2} = $signal1;
    } else {
      die "Illegal MAP file line $_\n";
    }
  }

  close( MFILE );

}

sub vcd_parse_def_var {

  my( $num, $str ) = @_;
  my $type;
  my $size;
  my $id_code;
  my $ref;
  my $reftmp;
  my $tmp;
  my $msb = -1;
  my $lsb = -1;
  my $tmplsb;

  # print "str: $str (w,d,S,S,S)\n";

  if( $str =~ /\s*(\w+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)/ ) {

    $type    = $1;
    $size    = $2;
    $id_code = $3;
    $ref     = $4;
    $tmp     = $5;

    if( $type eq "real" ) {

      $msb = 63;
      $lsb = 0;

    } else {

      if( $tmp ne "\$end" ) {

        # A bit select was specified for this signal, get the size
        if( $tmp =~ /\[(\d+):(\d+)\]/ ) {
          $msb = $1;
          $lsb = $2;
        } elsif( $tmp =~ /\[(\d+)\]/ ) {
          $lsb = $1;
          $msb = $lsb;
        } else {
          die "ERROR:  Unrecognized \$var format (1)\n";
        }

      } elsif( $ref =~ /([a-zA-Z0-9_]+)\[(\w+)\]\./ ) {

        $reftmp = $1;
        $tmp    = $2;

        # This is a hierarchical reference so we shouldn't modify ref -- quirky behavior from VCS
        $msb = $size - 1;
        $lsb = 0;

      } elsif( $ref =~ /([a-zA-Z0-9_]+)\[(\w+)\]/ ) {

        $reftmp = $1;
        $tmp    = $2;
        $ref    = $reftmp;

        if( $tmp =~ /(\d+):(\d+)/ ) {
          $msb = $1;
          $lsb = $2;
        } elsif( $tmp =~ /(\d+)/ ) {
          $lsb = $1;
          $msb = $lsb;
        } else {
          die "ERROR:  Unrecognized \$var format (2)\n";
        }

      } else {

        $msb = $size - 1;
        $lsb = 0;

      }

    }     
            
    # Store the signal
    if( $ref =~ /\s*\\?covered\$/ ) {

      # Don't store internal coverage signals

    } else {

      $mapped_signal = $map->{SIGNAL}{$curr_scope}{$ref};
      if( ($num == 1) && ($mapped_signal ne "") ) {
        $ref = $mapped_signal;
      }
      $db->{$num}{SCOPES}{$curr_scope}{SIGNALS}{$ref}{ID}  = $id_code;
      $db->{$num}{SCOPES}{$curr_scope}{SIGNALS}{$ref}{MSB} = $msb;
      $db->{$num}{SCOPES}{$curr_scope}{SIGNALS}{$ref}{LSB} = $lsb;
      $db->{$num}{IDS}{$id_code}                           = "$curr_scope.$ref";

    }
        
  } else {
        
    die "ERROR:  Unrecognized \$var format (3)\n";
        
  }
      
}
        
# Parses definition $scope keyword line until $end keyword is seen.
sub vcd_parse_def_scope {
            
  my( $num, $str ) = @_;
  my $type;
  my $id;
          
  if( $str =~ /\s*(\w+)\s+(\S+)\s+\$end/ ) {

    $type = $1;
    $id   = $2;
        
    # For now we will let any type slide
    if( $curr_scope ne "" ) {
      $mapped_name = $map->{SCOPE}{$curr_scope}{$id};
      if( ($num == 1) && ($mapped_name ne "") ) {
        $id = $mapped_name;
      }
      $db->{$num}{PARENT}{"$curr_scope.$id"} = $curr_scope;
      $curr_scope .= ".$id";
    } else {
      $curr_scope = $id;
    }

  } else {

    die "ERROR:  Unrecognized \$scope format\n";

  }

}

sub vcd_parse_def {
  
  my $num          = $_[0];
  my $enddef_found = 0;
  my $keyword, $line;
  my $chars_read;
  my $skip_to_end  = 0;

  if( $VERBOSE ) {
    print "Reading in VCD header $num\n";
  }

  while( !$enddef_found && ((($num == 0) && ($line = <VFILE1>)) || (($num == 1) && ($line = <VFILE2>))) ) {

    chomp( $line );

    ($keyword, @rest) = split( /\s+/, $line );
    $line = join( " ", @rest );

    # print "  keyword: $keyword, line: $line\n";

    if( substr( $keyword, 0, 1 ) eq "\$" ) {

      if( substr( $keyword, 1 ) eq "var" ) {
        &vcd_parse_def_var( $num, $line );
      } elsif( substr( $keyword, 1 ) eq "scope" ) {
        &vcd_parse_def_scope( $num, $line );
      } elsif( substr( $keyword, 1 ) eq "upscope" ) {
        $curr_scope = $db->{$num}{PARENT}{$curr_scope};
      } elsif( substr( $keyword, 1 ) eq "enddefinitions" ) {
        $enddef_found = 1;
      } elsif( $skip_to_end && ($line =~ /\$end/) ) {
        $skip_to_end = 0;
      } else {
        $skip_to_end = 1;
      }

    } elsif( $skip_to_end ) {

      # Ignore

    } else {

      die "ERROR:  Non-keyword located where one should have been \"$keyword\"\n";

    }

  }

}

sub vcd_diff_header {

  if( $VERBOSE ) {
    print "Comparing VCD headers...  ";
  }

  # First, compare the first database against the second
  $scopes = $db->{0}{SCOPES};
  foreach $scope (keys %$scopes) {
    $curr_scope = $db->{1}{SCOPES}{$scope};
    if( keys( %$curr_scope ) ) {
      $db->{1}{SCOPES}{$scope}{MATCHED} = 1;
      $signals = $db->{0}{SCOPES}{$scope}{SIGNALS};
      foreach $signal (keys %$signals) {
        $curr_signal = $db->{1}{SCOPES}{$scope}{SIGNALS}{$signal};
        if( keys( %$curr_signal ) &&
            ($db->{0}{SCOPES}{$scope}{SIGNALS}{$signal}{MSB} eq $db->{1}{SCOPES}{$scope}{SIGNALS}{$signal}{MSB}) &&
            ($db->{0}{SCOPES}{$scope}{SIGNALS}{$signal}{LSB} eq $db->{1}{SCOPES}{$scope}{SIGNALS}{$signal}{LSB}) ) {
          $db->{1}{SCOPES}{$scope}{SIGNALS}{$signal}{MATCHED} = 1;

        # Don't consider one bit signals in the inlined dumpfile (events are changed to one-bit regs and events are not output to dumpfiles)
        } elsif( (($db->{0}{SCOPES}{$scope}{SIGNALS}{$signal}{MSB} != 0) ||
                  ($db->{0}{SCOPES}{$scope}{SIGNALS}{$signal}{LSB} != 0)) &&
                 ($db->{1}{SCOPES}{$scope}{SIGNALS}{$signal}{LSB} ne "") ) {
          if( $VERBOSE ) {
            print "FAILED!\n";
          }
          die "  ERROR:  Matching signal $scope.$signal not found in second database\n";
        }
      }
    }
  }

  # Second, scroll through the second database to see if there are any unmatched things
  $scopes = $db->{1}{SCOPES};
  foreach $scope (keys %$scopes) {
    if( $db->{1}{SCOPES}{$scope}{MATCHED} == 0 ) {
      if( $VERBOSE ) {
        print "FAILED!\n";
      }
      die "  ERROR:  Scope $scope not found in first database\n";
    }
    $signals = $db->{1}{SCOPES}{$scope}{SIGNALS};
    foreach $signal (keys %$signals) {
      $curr_signal = $db->{1}{SCOPES}{$scope}{SIGNALS}{$signal};
      if( keys( %$curr_signal ) && ($db->{1}{SCOPES}{$scope}{SIGNALS}{$signal}{MATCHED} == 0) ) {
        if( $VERBOSE ) {
          print "FAILED!\n";
        }
        die "  ERROR:  Signal $scope.$signal not found in first database\n";
      }
    }
  }

  if( $VERBOSE ) {
    print "PASSED!\n";
  }

}

sub vcd_diff_timestep {

  if( $VERBOSE ) {
    print "Comparing timestep $timestep1...  ";
  }
  
  # If the timesteps match, make sure that the databases match each other exactly.
  if( $timestep1 == $timestep2 ) {

    # First, compare the first database to the second
    $values = $db->{0}{VALUES};
    foreach $sym (keys %$values) {
      $curr_sym = $db->{1}{VALUES}{$sym};
      if( keys( %$curr_sym ) ) {
        if( $db->{0}{VALUES}{$sym}{VALUE} eq $db->{1}{VALUES}{$sym}{VALUE} ) {
          $db->{1}{VALUES}{$sym}{MATCHED} = 1;
        } else {
          if( $VERBOSE ) {
            print "FAILED!\n";
          }
          die "  ERROR:  Signal $sym mismatched in second database (first: $db->{0}{VALUES}{$sym}{VALUE}, second: $db->{1}{VALUES}{$sym}{VALUE})\n";
        }
      }
    } 

    # Second, check to make sure that the second database doesn't have unmatched elements
    $values = $db->{1}{VALUES};
    foreach $sym (keys %$values) {
      if( $db->{1}{VALUES}{$sym}{MATCHED} == 0 ) {
        if( $VERBOSE ) {
          print "FAILED!\n";
        }
        die "  ERROR:  Signal $sym mismatched in first database\n";
      }
    }

  # Otherwise, if the first database timestep is less, make sure that the only value changes are to internal covered signals
  } elsif( $timestep1 < $timestep2 ) {

    $values = $db->{0}{VALUES};
    foreach $sym (keys %$values) {
      if( $db->{0}{IDS}{$sym} ne "" ) {
        if( $VERBOSE ) {
          print "FAILED!\n";
        }
        die "  ERROR:  Symbol $sym changed in first database during a timestep when no change should have occurred\n";
      }
    }

  # Otherwise, if the second database timestep is less, make sure that the only value changes are to internal covered signals
  } else {

    $values = $db->{1}{VALUES};
    foreach $sym (keys %$values) {
      if( $db->{1}{IDS}{$sym} ne "" ) {
        if( $VERBOSE ) {
          print "FAILED!\n";
        }
        die "  ERROR:  Symbol $sym changed in first database during a timestep when no change should have occurred\n";
      }
    }

  }

  # Third, clear the hash tables
  %db->{0}{VALUES} = {};
  %db->{1}{VALUES} = {};

  if( $VERBOSE ) {
    print "PASSED!\n";
  }

}

sub vcd_parse_sim_vector {

  my( $num, $line ) = @_;
  my $sym;
  my $value;

  # print "In sim_vector: $line (w,S)\n";

  if( $line =~ /(\w+)\s+(\S+)/ ) {

    $value = $1;
    $sym   = $2;

    $id = $db->{$num}{IDS}{$sym};
    if( $id ne "" ) {
      $db->{$num}{VALUES}{$id}{VALUE} = $value;
    }

  } else {

    die "ERROR:  Bad file format\n";

  }

}

sub vcd_parse_sim_real {

  my( $num, $line ) = @_;
  my $sym;
  my $value;

  # print "In sim_real: $line (w,S)\n";

  if( $line =~ /(\S+)\s+(\S+)/ ) {

    $value = $1;
    $sym   = $2;

    $id = $db->{$num}{IDS}{$sym};
    if( $id ne "" ) {
      $db->{$num}{VALUES}{$id}{VALUE} = $value;
    }

  } else {

    die "ERROR:  Bad file format\n";

  }

}

sub vcd_parse_sim {

  my $num           = $_[0];
  my $last_timestep = 0;
  my $simulate      = 1;
  my $sym, $id;

  if( $VERBOSE ) {
    print "Parsing simulation information from VCD $num\n";
  }

  while( $simulate && ((($num == 0) && ($line = <VFILE1>)) || (($num == 1) && ($line = <VFILE2>))) ) {

    chomp( $line );

    if( substr( $line, 0, 1 ) eq "\$" ) {

      # Ignore

    } elsif( (substr( $line, 0, 1 ) eq "b") || (substr( $line, 0, 1 ) eq "B") ) {

      &vcd_parse_sim_vector( $num, substr( $line, 1 ) );

    } elsif( (substr( $line, 0, 1 ) eq "r") || (substr( $line, 0, 1 ) eq "R") || $carry_over ) {

      &vcd_parse_sim_real( $num, substr( $line, 1 ) );

    } elsif( substr( $line, 0, 1 ) eq "#" ) {

      $simulate      = 0;
      $last_timestep = substr( $line, 1 );

    } elsif( (substr( $line, 0, 1 ) eq "0") ||
               (substr( $line, 0, 1 ) eq "1") ||
               (substr( $line, 0, 1 ) eq "x") ||
               (substr( $line, 0, 1 ) eq "X") ||
               (substr( $line, 0, 1 ) eq "z") ||
               (substr( $line, 0, 1 ) eq "Z") ) {

      $sym = substr( $line, 1 );
      $id  = $db->{$num}{IDS}{$sym}; 
      if( $id ne "" ) {
        $db->{$num}{VALUES}{$id}{VALUE} = substr( $line, 0, 1 );
      }

    } else {

      die "ERROR:  Badly placed token \"$line\"\n";

    }

  }

  return( $simulate ? -1 : $last_timestep );

}

