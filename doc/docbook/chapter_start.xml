<chapter id="chapter.start">
  <title>Getting Started</title>

  <sect1 id="section.start.methods">
    <title>Methods for scoring the design</title>
    <para>
      Before you are ready to being scoring, merging and generating coverage reports from the design, you will first need to
      decide whether you want to create instrumented design files and simulate with those or simulate with the original design files.
      Additionally, you will need to decide if you want to post-process VCD/LXT2 -formatted dumpfiles generated from simulation,
      co-process VCD/LXT2 -formatted dumpfiles using two processes (one for the simulation process and one for the Covered process) and
      a Unix FIFO, or whether you want to accummulate coverage information alongside the simulator using the simulator's VPI interface.
      There are advantages and disadvantages to these methods, so select the method that will best work for you.
    </para>

    <sect2 id="section.start.methods.sim">
      <title>Simulating the design</title>
      <para>
        Prior to compiling and simulating the design in preparation for coverage, you will need to determine if you would like
        Covered to create an alternative design file that contains embedded code coverage information in it, or whether you would like
        to simulate the original design files and have Covered score the design on its own.  Both methods have advantages and disadvantages
        that you will need to consider prior to compiling/simulating and are described in detail below.
      </para>

      <sect3 id="section.start.methods.sim.noinline">
        <title>Compile original design files</title>
        <para>
          In this method the design is first simulated with the original design files and code coverage is obtained by resimulating portions
          of the design after (or during the original simulation).  This method has been the way of obtaining coverage results for Covered
          since its beginning.  The advantages to this method are primarily philosophical.  Code coverage and simulation are two distinct
          processes and neither interferes with the other.  However, the disadvantage to this method are primarily three-fold.
        </para>
        <para>
          First, to obtain coverage results for line coverage, combinational logic coverage and assertion coverage, information above and
          beyond the information contained in the dumpfile (or via the VPI) are needed which requires Covered to perform a second simulation
          of the design.  The simulation speed of this second simulation is dependent upon Covered and since Covered is not intended to be
          a full-fledged Verilog simulator, it generally will simulate slower than commercial and some open source simulators as these are
          tuned for simulation (not code coverage).  The additional overhead of Covered's second simulation can lead to longer scoring runs.
          It would be preferable to avoid the second simulation altogether and lean on a Verilog simulator's speed improvements to get the
          coverage information.
        </para>
        <para>
          Second, since Covered performs its own simulation of the design, it is possible that the exact execution sequence may be different
          between the original simulated results and the scored simulated results (especially when there are actual race conditions present
          within the original code).  This can mean that the coverage results have the potential to be different than actual results.  This
          is typically not an issue if Covered's built-in race condition checker is used, but the use of the race condition checker can cause
          blocks of logic to be excluded from coverage consideration.  It would be better if we could guarantee that the scored results will
          match the simulated results exactly and not exclude any code from coverage consideration.
        </para>
        <para>
          Third, since Covered is not a full simulator, it cannot simulate some Verilog constructs (see <xref linkend="section.boundaries.unanalyzed"/>)
          those blocks are pulled from coverage consideration.  Again, it would be better if these types of logic blocks could be
          included for coverage consideration.
        </para>
      </sect3>

      <sect3 id="section.start.methods.sim.inline">
        <title>Instrumenting (Inlining) code coverage into design files</title>
        <para>
          In this method, Covered is first used to read in the original design files and output a copy of those files into a separate directory
          that contain additional Verilog code that used by Covered for extracting coverage information directly.  Instead of compiling/simulating
          the original files, the user uses this versions of the files for simulation.  The dumpfile output (or VPI callbacks) contain all of the
          code coverage information such that running Covered's score command eliminates the need for Covered's own simulation.  The advantages
          of these method address each of the disadvantages of the prior method, leading to faster score runs.  The primary disadvantage to this
          method is that toggle coverage information can be incorrect if a wire/reg/etc. is assigned to different values within the same timestep.
          The intermediate values are not seen by Covered (only the final value).  This means that signals used within functions, for loop control
          expressions (where there is no delay within the for loop) and some behavioral-level may not be accurate.  You will need to decide if the
          performance enhancements and code coverage consideration enhancements are worth the price of accurate toggle coverage within behavioral-level
          code.
        </para>
        <para>
          See <xref linkend="section.score.inline"/> for more details.
        </para>
      </sect3>
    </sect2>

    <sect2 id="section.start.methods.score">
      <title>Dumping the design</title>
      <para>
        Once you have decided whether to create inlined design files or use the original files for scoring, you will need
        to decide how to run Covered's score command to create a scored CDD file.  Here are the different methods available to you
        (note that all methods work with Covered regardless of whether inlined or original design files are used).
      </para>

      <sect3 id="section.start.methods.score.dumppost">
        <title>Post-processing VCD/LXT2 dumpfiles</title>
        <para>
          Generating post-process coverage information from VCD/LXT2 -formatted dumpfiles requires three steps:
        </para>
        <para>
          <orderedlist>
            <listitem>
              <para>Compile the simulator to dump in the specified format.</para>
            </listitem>
            <listitem>
              <para>Run the simulation.</para>
            </listitem>
            <listitem>
              <para>Run Covered's score command using the dumpfile as input along with the design.</para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          Performing these steps will generate the needed CDD file that can be used for merging or reporting.
          The advantages to this approach is that the steps are fairly simple and are compiler/simulator -independent. However,
          there are two main drawbacks. First, compiling with dumping enabled often slows simulation by some significant factor.
          Second, the dumpfiles generated from simulation can often be quite large (especially for VCD dumping), consuming a lot
          of disk space. Additionally, if your simulator dumps in a format different from VCD or LXT2, you will need to perform
          an additional step in transforming the original dumpfile into one of these formats. This is often a time-consuming task
          if the design and/or dumpfile is significantly large. If you are generating lots of dumpfiles for coverage (say from
          running a regression), the amount of disk space needed to store these files can be tremendous, making this approach
          almost not feasible.
        </para>
      </sect3>

      <sect3 id="section.start.methods.score.dumpco">
        <title>Co-processing VCD/LXT2 dumpfiles via FIFO</title>
        <para>
          Generating co-process coverage information from VCD/LXT2 -formatted dumpfiles requires four steps:
        </para>
        <para>
          <orderedlist>
            <listitem>
              <para>Compile the simulator to dump in the specified format.</para>
            </listitem>
            <listitem>
              <para>Create a Unix FIFO via the <code>mkfifo <emphasis>fifoname</emphasis></code> command.</para>
            </listitem>
            <listitem>
              <para>Create an empty CDD file for the design using Covered's score command.</para>
            </listitem>
            <listitem>
              <para>
                Run the simulation and Covered's score command simultaneously.  The following is an example of a testbench and
                command-line commands:
              </para>
              <para>
                <example xml:id="example.start.methods.score.dumpco">
                  <title>Running Covered Alongside a Simulation Process Using a Unix FIFO to Pass Dumpfile Information</title>
                  <programlisting><![CDATA[
  # Module listing for file "test.v"
  module tb;
    ...
    initial begin
            $dumpfile( "dump_fifo" );
            $dumpvars( 0, tb );
            ...
    end
    ...
  endmodule

  # Command-line output
  > mkfifo dump_fifo
  > vcs test.v
  > covered score -t tb -v test.v -o test.cdd
  > ./simv &
  > covered score -cdd test.cdd -vcd dump_fifo
                  ]]></programlisting>
                </example>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          The end result of these steps is the same CDD file that results from using the dumpfile method described above.
          The primary advantages of this approach are that no dumpfiles are actually created, saving on disk space, and
          it does not significantly slow down the simulation process.  Because both simulation and coverage scoring
          occur simultaneously, there should be a wall clock time improvement with this method.
        </para>
        <para>
          The drawbacks of this approach are basically that the time improvement won't be significant if you are running
          on a single processor/core system and that it is restricted to machines that support the Unix fifo (this may
          not be an actual restriction, however).
        </para>
      </sect3>

      <sect3 id="section.start.methods.score.vpi">
        <title>Using the VPI interface to gather coverage information</title>
        <para>
          Generating coverage information using the VPI interface of the simulator requires three main steps:
        </para>
        <para>
          <orderedlist>
            <listitem>
              <para>
                Create a base CDD file from the design along with a top-level Verilog module and PLI table file (this second
                file is needed for the commercial VCS compiler).
              </para>
            </listitem>
            <listitem>
              <para>
                Compile the simulator using the Covered VPI module (or shared object).
              </para>
            </listitem>
            <listitem>
              <para>
                Run the simulation.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          The end result of these steps is the same CDD file that results from using the dumpfile method described
          above. The primary advantage of this approach is that no dumpfiles are required, saving on disk space and dumpfile
          processing time. The drawbacks of this approach are the following:
        </para>
        <para>
          <orderedlist>
            <listitem>
              <para>
                Simulation runs much slower using the VPI and Covered (most likely slower than creating dumpfiles from the
                simulator).
              </para>
            </listitem>
            <listitem>
              <para>
                Covered VPI modules are only available for certain compilers (Icarus Verilog, Cver and VCS currently); however,
                adding support for other compilers should not be a difficult thing to do.
              </para>
            </listitem>
            <listitem>
              <para>
                The VPI modules will only work for compilers that support the VPI interface (a Verilog-2001 feature).
              </para>
            </listitem>
          </orderedlist>
        </para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="section.start.dump">
    <title>What is needed for dumpfile scoring?</title>
    <para>
      Before Covered can be invoked for dumpfile scoring, you must have a simulatable Verilog design and a VCD or LXT2 dumpfile
      containing information from a simulation run of the design that dumps the module(s) that you want to check for coverage.
      The VCD dumpfile style was chosen due to its universal support by Verilog simulators while the LXT2 dumpfile style was
      chosen due to its compactness and growing support by other open source simulators and dumpfile readers. Once you have
      these two parts, you are ready to begin generating coverage results.
    </para>

    <sect2 id="section.start.dump.selecting">
      <title>Selecting What to Dump</title>
      <para>
        If coverage is being scored via a VCD/LXT2 dumpfile, it is necessary for the user to setup $dumpfile and $dumpvars calls
        to dump the various modules that are being scored.  Covered allows the user to do this in one of two ways.
      </para>
      <para>
        First, the user may hand create these calls within their testbench.  If this approach is taken, it is necessary that all
        modules being scored by Covered be included in the $dumpvars calls.  Eliminating scored modules from the dumpfile will result
        in inaccurate coverage information.  Additionally, it is mandatory that the dumpfile start at time 0 and that all dump information
        be included in the dumpfile (i.e., using the $dumplimit system task could cause dump information to be lost that will result
        in inaccurate coverage results).
      </para>
      <para>
        Second, the user may take advantage of Covered's -dumpvars option to the score command.  Adding this parameter (and the optional
        -top_ts option) will create a top-level module file that can be compiled along with the testbench that will dump all of the parts
        of the Covered design that are needed by Covered.  Using this approach will result in the best overall performance for dumpfile
        coverage accumulation as all unnecessary dump information will be stripped, resulting in both faster simulation and faster
        coverage scoring.
      </para>
      <para>
        If the second approach is taken, simply use the score command to parse the design and output an unscored CDD and the dumpvars module,
        using a command similar to the following:
      </para>
      <para>
        <programlisting>
  covered score -t top -v dut.v -dumpvars dut_dump.v -o dut.cdd
        </programlisting>
      </para>
      <para>
        If `timescale is specified at the top of dut.v, it may be necessary for compiling purposes to have the timescale specified at the top
        of dut_dump.v.  To do this, simply specify the -top_ts option in the score command.  Note that the example command does not list either
        the -vcd or -lxt options.  If either of these options are present on the score command-line, the dut_dump.v file will not be created
        and the score command will attempt to score the design with the specified dumpfile.
      </para>
      <para>
        After the dut_dump.v file has been created, simply compile it along with your DUT as a top-level module.  For example,
      </para>
      <para>
        <programlisting>
  iverilog dut.v dut_dump.v
        </programlisting>
      </para>
      <para>
        After the simulation has been compiled and run, a dumpfile called "dut_dump.vcd" (using the above example) will exist in the run
        directory.  This dumpfile can then be used in a second call to the score command via the -vcd or -lxt options along with the
        unscored CDD file to create a scored version of the CDD file.
      </para>
    </sect2>

    <sect2 id="section.start.dump.vcd">
      <title>Creating a VCD dumpfile</title>
      <para>
        By default, the $dumpfile system task call will create a file and populate it with VCD-style dumpfile information.  Simply
        use the resulting VCD dumpfile in the -vcd option to the score command to obtain coverage for that design.
      </para>
    </sect2>

    <sect2 id="section.start.dump.lxt">
      <title>Creating an LXT2 dumpfile</title>
      <para>
        An LXT2 dumpfile can be created in several different ways depending on the Verilog simulation tool that you are using. If
        you are using the <ulink url="http://www.icarus.com/eda/verilog">Icarus Verilog</ulink> open source simulator, you can
        simply generate an LXT2-style dumpfile by specifying the -lxt2 option to the simulator command-line. For example, if you
        had a file called "foo.v" that contained the same $dumpfile and $dumpvars commands used for VCD dumping and compiled it
        with Icarus Verilog into a VVP file called "a.out", you could cause Icarus Verilog to generate an LXT2 dumpfile (instead
        of a VCD dumpfile by calling "vvp a.out -lxt2". This will cause an LXT2 style dumpfile instead of the standard VCD style
        dumpfile.
      </para>
      <para>
        You can also transform many different dumpfile formats into an LXT2 style dumpfile with the helper programs that come with
        the <ulink url="http://home.nc.rr.com/gtkwave/">GtkWave</ulink> waveform viewer.
      </para>
    </sect2>
  </sect1>

  <sect1 id="section.start.vpi">
    <title>What is needed for VPI scoring?</title>
    <para>
      After Covered has been configured and built to include the creation of a VPI loadable module or shared object file (see
      <xref linkend="section.installation.configuring"/> for details), Covered is capable of scoring during a simulation run by using the VPI
      (Verilog Procedural Interface) access mechanism. This is done by loading the Covered VPI module (or shared object) into the
      simulator executable prior to running (depending on the simulator being used). The following steps should be taken to create
      a scored CDD file using this method.
    </para>
    <para>
      <orderedlist>
        <listitem>
          <para>
            Create the Verilog file that will be compiled as a top-level module in the design (alongside the actual top-level(s)).
          </para>
          <para>
            This is done by running the score command with the -vpi option. The following example command-line shows how this step
            is done, creating a file called "covered_vpi.v".
          </para>
          <para>
            <code>> covered score -t top -vpi</code>
          </para>
        </listitem>
        <listitem>
          <para>
            Compile the simulator executable, including the previously generated file and the Covered VPI module. See the compile
            instructions for the Icarus Verilog, Cver or VCS simulators below.
          </para>
        </listitem>
        <listitem>
          <para>
            Run the simulation. Once simulation is complete, the resulting CDD file will be a completely scored database, ready to be
            merged with other CDD files from the same design or reported on.
          </para>
        </listitem>
      </orderedlist>
    </para>

    <sect2 id="section.start.vpi.iv">
      <title>Compiling for Icarus Verilog</title>
      <para>
        If you are compiling an Icarus Verilog simulation, simply add
        <emphasis role="bold"><code>-m <emphasis>tool_install_root</emphasis>/libexec/covered.vpi covered_vpi.v</code></emphasis> to the command-line.
      </para>
    </sect2>

    <sect2 id="section.start.vpi.cver">
      <title>Compiling for Cver</title>
      <para>
        If you are compiling a Cver simulation, simply add
        <emphasis role="bold"><code>+loadvpi=<emphasis>tool_install_root</emphasis>/libexec/covered.cver.so:vpi_compat_bootstrap covered_vpi.v</code></emphasis>
        to the command-line.
      </para>
    </sect2>

    <sect2 id="section.start.vpi.vcs">
      <title>Compiling for VCS</title>
      <para>
        If you are compiling a VCS simulation, simply add
        <emphasis role="bold"><code>+vpi -load <emphasis>tool_install_root</emphasis>/libexec/covered.vcs.so:covered_register covered_vpi.v</code></emphasis> to
        the command-line.
      </para>
    </sect2>

    <sect2 id="section.start.vpi.ncv">
      <title>Compiling for NC-Verilog</title>
      <para>
        If you are compiling a NC-Verilog simulation, switch to NC-Verilog's irun command to load the covered shared object:
        <emphasis role="bold"><code>-loadvpi <emphasis>tool_install_root</emphasis>/libexec/covered.ncv.so:covered_register</code></emphasis> and enable all
        access with <emphasis role="bold"><code>-access +rwc</code></emphasis>.
      </para>
      <para>
        You can hardcode the $covered_sim call into your RTL or you can run it dynamically using the CLI, by adding the 
        <emphasis role="bold"><code>-input input.tcl</code></emphasis> switch to irun.  Where the input.tcl file looks like the following and tb.dut is
        the coverage instance:
      </para>
      <para><programlisting><![CDATA[
        call -systf {$covered_sim} {"scored.cdd"} tb.dut
        run]]></programlisting>
      </para>
    </sect2>
  </sect1>

</chapter>
