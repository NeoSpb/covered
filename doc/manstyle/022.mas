<!--
[variables]
{
  $page_title = "FAQ"
  $page_title_english = "FAQ"
  $file_prev = "021.html"
  $file_next = "023.html"
  $real_page_number = "22"
  $page_number = "22"
}
-->

<_header1>
$page_title
</_header1>

<_pg>
This page contains a list of accummulated Frequently Asked Questions.
If you are having difficulties using Covered or have questions that
are not answered in the User's Guide, please check this list for
answers.  If you do not find the information that you are looking for
in the User's Guide or this FAQ, please send an e-mail to:
</_pg>

<_pg>
<a href="mailto:trevorw@charter.net">Trevor Williams</a>
</_pg>

<_margin>Question</_margin>

<_pg>
<strong>Is a CDD file generated from a newer version of Covered compatible
with a CDD file generated from an older version?</strong>
</_pg>

<_pg>
The answer to this question is, "Well, that depends...".  Since the format of the CDD file
is only used by Covered, the contents and format of this file may be changed to suit the
needs of Covered.  This means that it is possible for a CDD file created from an older
version of Covered to be incompatible with a newer version.  Additionally, the developer's
of Covered will not make any attempts to make sure that older CDD files can be properly
read by a newer version of Covered.  It is suggested that any CDD files generated from a
particular version of Covered be merged and/or reported on by that same version, and if
Covered is upgraded, new CDD files should be generated.
</_pg>

<_pg>
This being said, it is also a possibility that between versions of Covered a "backwards
compatibility" may be maintained if a change to this file's format is not required.
</_pg>

<_margin>Question</_margin>

<_pg>
<strong>When I run the score command, Covered seems to take a long time to run.  Is there 
anything that I can do to speed up scoring?</strong>
</_pg>

<_pg>
While Covered is continuously being enhanced to provide better performance for all commands
(especially the score command), it may still take a while to complete scoring if one or more
of the following is true:
</_pg>

<_pg>
<ol>
  <li>The design being scored is sufficiently large</li>
  <li>The VCD dumpfile is sufficiently large</li>
  <li>The VCD dumpfile contains dump information for a part of the design 
      not being scored</li>
</ol>
</_pg>

<_margin>1.</_margin>

<_pg>
If reason (1) is true, speeding up each run can be achieved by one of the following
suggestions:
</_pg>

<_pg>
<ul>
  <li>Reduce the scored design in size by eliminating modules from its design tree.
      (See <a href="011.html#6_3">Section 6.3 Specifying What To Cover</a> for more
      information on how to accomplish this)</li>
  <li>Split up the design into smaller parts along module boundaries and generate coverage
      for those parts.  Note:  it is not currently possible to append these modules into
      one file.  Merging and reporting must be done on these smaller pieces independently
      from one another.</li>
</ul>
</_pg>

<_margin>2.</_margin>

<_pg>
If reason (2) is true, nothing can be done except to shorten the run time of the diagnostics
to produce shorter dumpfiles.
</_pg>

<_margin>3.</_margin>

<_pg>
If reason (3) is true, the $dumpvars call in the simulator should be modified to only
generate VCD dump information for the modules included in scoring.  If there are modules
not being scored which are included in the $dumpvars calls, please remove these unnecessary
modules from dumpfile output.
</_pg>

<_pg>
If you believe that you have a situation which is void of these prevailing reasons and
Covered is still running slowly, please send an e-mail to 
<a href="mailto:trevorw@charter.net">me</a>.  I will consider these problems to be of lower
priority than actual bugs but will look into the situation to see where code can
be optimized.
</_pg>

<_margin>Question</_margin>

<_pg>
<strong>I get an assertion error when running Covered, what should I do?</strong>
</_pg>

<_pg>
Covered uses C assertions to make sure that internal pointers are not be referenced when
NULL and that certain internal situations do not arise.  If you receive some type of
assertion error when running Covered, it means that something went wrong internally in
Covered.  The error is NOT due to user error.  Please submit a bug report containing the
assertion error message, file and line number.  Additionally, run the Covered command with
the -D global option (covered -D <command>) and provide the output from doing this with the
bug report (please only specify tail of output if the output is too lengthy).
</_pg>

<_pg>
If Covered provides any other type of error message (something other than a core dump), 
Covered has found a user error that must be fixed by the user.  Please do not submit bug
reports if these errors are encountered, unless you wish to add a question about it to the
FAQ.
</_pg>

<_margin>Question</_margin>

<_pg>
<strong>Covered is giving me a parser error for Verilog code that seems to be syntactically
correct.  What is wrong?</strong>
</_pg>

<_pg>
If Covered displays a syntax (parse) error during the score command and the Verilog code is
written correctly, it may be that either the code is supported in the Verilog-2001
specification and not in older specifications or Covered's parser is incomplete.  If the
former is true, see the next FAQ.  If the latter is true, please submit a bug or send an
e-mail containing a code snippet of the unsupported Verilog.  
</_pg>

<_margin>Question</_margin>

<_pg>
<strong>Is Covered's Verilog parser Verilog-2001 compliant?</strong>
</_pg>

<_pg>
Not yet.  The goal of the 0.2 stable release was to allow parsing of all Verilog-1995
standard code.  Parsing support for the entire Verilog-2001 standard will be completed in
the 0.3 stable release.  However, there are some constructs in the Verilog-2001 standard
that have been supported (basically because Icarus Verilog currently supports them), so the
recommendation is to use Covered on that code to find out if the parsing support is there.
If not, please send a bug report or e-mail containing the code snippet that doesn't parse.
I will make a point to provide a patch containing parsing support for this code as soon as
possible.
</_pg>
