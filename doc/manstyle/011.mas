<!--
[variables]
{
  $page_title = "Getting Started"
  $page_title_english = "Getting Started"
  $file_prev = "010.html"
  $file_next = "012.html"
  $real_page_number = "11"
  $page_number = "11"
}
-->

<_header1>
$page_title
</_header1>

<_header2>
What do you need?
</_header2>

<_pg>
Before Covered can be invoked, you must have a simulatable
Verilog design and a VCD dumpfile containing information from
a simulation run of the design that dumps the module(s) that 
you want to check for coverage.  The VCD dumpfile style was
chosen due to its universal support by Verilog simulators.
That is, most, if not all, Verilog simulators have a mechanism
for generating VCD dumpfiles.  Once you have these two parts,
you are ready to begin generating coverage results.
</_pg>

<_header2>
Creating a VCD dumpfile
</_header2>

<_pg>
In Verilog, the way that you create the VCD dumpfile is by
using two types of Verilog system calls (1) &dol;dumpfile and (2)
&dol;dumpvars.  The following example shows how to create and 
generate a dumpfile called "test.vcd" that will dump the submodule
called "foo".
</_pg>

<_margin>Example</_margin>

<_code>
module test;<br>
<br>
initial<br>
$sp begin<br>
$sp$sp$sp &dol;dumpfile( "test.vcd" );<br>
$sp$sp$sp &dol;dumpvars( 1, test.foo );<br>
$sp end<br>
<br>
foo_mod foo();<br>
<br>
endmodule<br>
<br>
module foo_mod;<br>
<br>
...<br>
<br>
endmodule
</_code>

<_margin>&dol;dumpfile</_margin>

<_pg>
The &dol;dumpfile system call takes in one parameter that is
a string of the name of the dumpfile to create, in this case
the dumpfile we want to create is called "test.foo".  The purpose
of this function to create the file (open it for writing) and
outputs some initialization information to the file.
</_pg>

<_margin>&dol;dumpvars</_margin>

<_pg>
The &dol;dumpvars system call takes in two parameters.  The first
is the number of levels of hierarchy that you want to dump.  In
the example, we want to only dump the module instance called
"foo" which is why the dump level was set to 1.  To dump foo and
the level of submodules just beneath it, you would set the
dump level to 2 and so on.  To dump a module and all submodules
beneath it, set the dump level value to 0 (this means the level
specified and all levels below it).  The second parameter is
a Verilog hierarchical reference to the top-level module
instance that you want to dump.
</_pg>

<_pg>
The &dol;dumpfile system call may only be called once within
a Verilog design.  Typically, it is called in the top-most
level of the design (or testbench as it is commonly referred
to as); however, the language allows you to call it from anywhere
in your design as long as it precedes any calls to &dol;dumpvars.
</_pg>

<_pg>
The &dol;dumpvars system call may be called as many times as
necessary to dump the Verilog that you need.  For example, if
you want to get coverage results for several modules scattered
around the design, you may make several &dol;dumpvars calls to
dump exactly those modules that you want to see coverage for.
</_pg>

<_pg>
For the most part, that is about all there is to creating
VCD dumpfiles for the design.  All you need to do is run a simulation
with these system calls in it and a dumpfile will be generated
for that run.  Once you have this file, you are ready to see if
your design is Covered!
</_pg>
