<!--
[variables]
{
  $page_title = "Line Coverage"
  $page_title_english = "Line Coverage"
  $file_prev = "003.html"
  $file_next = "005.html"
  $real_page_number = "4"
  $page_number = "4"
}
-->

<_header2>
Line Coverage
</_header2>

<_pg>
Line coverage simply answers the question, "Was this line of 
code executed during simulation?"
</_pg>

<_pg>
Covered will display the number of logical lines of code that 
exist in a particular file with the number of logical lines 
that were executed during the simulation along with a 
percentage indicating the percentage of lines executed.  If 
verbose mode is selected for a report, Covered will display 
the lines of logic that were not executed during the simulation 
run.
</_pg>

<_header3>
Example
</_header3>

<_margin>Example</_margin>

<_pg>
Suppose that the following module was specified in your DUT that
is being analyzed:
</_pg>

<_code>
module test;<br><br>
reg a, b, c;<br><br>
initial<br>
$sp begin<br>
$sp$sp$sp a = 0;$sp$sp$sp // Line 1<br>
$sp$sp$sp b = 1;$sp$sp$sp // Line 2<br>
$sp$sp$sp if( a )<br>
$sp$sp$sp$sp$sp c = b;$sp // Line 3<br>
$sp$sp$sp else<br>
$sp$sp$sp$sp$sp c = ~b; // Line 4<br>
$sp end<br><br>
endmodule
        
</_code>

<_pg>
If this code were simulated as stated, the simulator would
execute lines 1 and 2, and due to the value assigned to 
<tt>a</tt>, line 4 would be executed.  This means that during 
execution, out of a possibility of 4 lines, only 3 were 
executed.  Therefore, Covered would state that for this module 
the line coverage percentage would be 75% (or 3 out of 4).
</_pg>

<_header3>
Recommendations
</_header3>

<_margin>Recommendations</_margin>

<_pg>
For a design to pass full coverage, it is recommended that the 
line coverage for all modules in a design receive 100% coverage.  
If a line of logic is not executed during simulation, the
design has not been fully exercised.  Line coverage is useful 
for determining holes in the test suite.
</_pg>
