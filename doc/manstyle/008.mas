<!--
[variables]
{
  $page_title = "Coverage Boundaries"
  $page_title_english = "Coverage Boundaries"
  $file_prev = "007.html"
  $file_next = "009.html"
  $real_page_number = "8"
  $page_number = "8"
}
-->

<_header1>
$page_title
</_header1>

<_pg>
To properly evaluate the effectiveness of any coverage tool, it is necessary to understand
what kinds of logic are able to be analyzed and which kinds of logic are unable to be analyzed
(along with a reason for why the logic cannot be adequately covered).  Understanding the
limitations of tools up front can often guide the user of those tools to make better
decisions in their usage.  In the case of Covered and the open source community, it may also
help drive ideas to how to correct or get around these limitations.
</_pg>

<_pg>
For these reasons, a list of what type of logic can be analyzed and what type of logic cannot
be currently analyzed is listed below.  Note that both of these lists may not be exhaustive
and are subject to change between releases of the tool.
</_pg>

<_header2>
What logic can be analyzed?
</_header2>

<_pg>
<ol>
  <li>All expressional logic which is comprised of the following data types and operators
      which exist in an assign block or an always block:
    <ul>
      <li>Nets: wire, tri, tri0, tri1, wor, wand, trior, triand, supply0, suppl1</li>
      <li>Triregs: trireg</li>
      <li>Registers: reg</li>
      <li>Parameter values</li>
      <li>Unary operators: +, -, ~, &, |, ^, ~&, ~|, ~^</li>
      <li>Arithmetic operators: +, -, *, /, %</li>
      <li>Logical operators: &&, ||, !</li>
      <li>Relational operators: &gt; &lt; &gt;= &lt;=</li>
      <li>Equality operators: ==, ===, !=, !==</li>
      <li>Bitwise operators: &, |, ^, ~&, ~|, ~^</li>
      <li>Shift operators: &lt;&lt; &gt;&gt;</li>
      <li>Concatentation/replication operators: {}, {{}}</li>
      <li>Bit select operators: [], [:]</li>
      <li>Conditional operator: ?:</li>
    </ul>
  </li>
  <li>case, casex, casez statements</li>
  <li>if, if/else statements</li>
  <li>Delays when delay value is integer</li>
  <li>Event waits:  wait, @(posedge), @(negedge), @()</li>
</ol>
</_pg>

<_header2>
What logic cannot be currently analyzed?
</_header2>

<_pg>
<ol>
  <li>All code within initial blocks, tasks, and functions.</li>
  <li>All code within repetition blocks:  FOR, WHILE, REPEAT</li>
  <li>All code within fork/join blocks</li>
  <li>All gate types (i.e., buf, not, or, and, etc.)</li>
  <li>All user defined primitives (UDPs)</li>
  <li>Memories</li>
  <li>All expressions containing types: integer, time, real, realtime, string</li>
  <li>System task calls (or any $... call)</li>
</ol>
</_pg>

<_pg>
When logic is encountered that cannot be analyzed within an always block, Covered will
disregard the entire always block.  If the entire always block cannot be analyzed, it does
not try to get coverage statistics as these will most likely be incorrect (i.e., disregarded
logic could affect the state of the logic that is being covered).
</_pg>
