<!--
[variables]
{
  $page_title = "Reading Toggle Coverage"
  $page_title_english = "Reading Toggle Coverage"
  $file_prev = "018.html"
  $file_next = "020.html"
  $real_page_number = "19"
  $page_number = "19"
}
-->

<_header2>
Reading Toggle Coverage
</_header2>

<_header3>
Summary Information Description - Module-based
</_header3>

<_pg>
For module-based reports, the summary table for toggle metrics includes information for the
name of each module that was covered and the name of the file in which the module is
described in.  Lines <a href="example.rptM.html#19">19 through 25</a> of the module-based report
show what this information looks like in the report.  We have two modules that were scored
within our DUT:  main and foobar.  The table shows that both modules were described in the
file "test.v".
</_pg>

<_header3>
Summary Information Description - Instance-based
</_header3>

<_pg>
For instance-based reports, the summary table for toggle metrics includes information for
the Verilog hierarchy pertaining to each instance on the left-hand-side of each row.  Lines
<a href="example.rptI.html#25">25 through 31</a> of the instance-based report show what this
information looks like in the report.  In our DUT example, there are two instances within the
design with the Verilog hierarchies of "main" and "main.bar".
</_pg>

<_header3>
Summary Information Description - Both
</_header3>

<_pg>
On the right-hand side of each row in the table are the hit, miss and total numbers for the
toggle 0->1 coverage, followed by a calculated percent of the signal bits that toggled from
a value of 0 to a value of 1 (calculated by taking the number of bits that toggled from 0
to 1 during simulation divided by the total number of signal bits).  The hit value
indicates how many signal bits were toggle from a value of 0 to 1 during simulation; the
miss value indicates the number of signal bits that were not toggled from a value of 0 to
1 during simulation; and the total value indicates the total number of signal bits within
the specified module/instance that Covered was able to simulate.
</_pg>

<_pg>
To the right of this information is the hit, miss and total statistics for signal bits that
toggled from a value of 1 to a value of 0.
</_pg>

<_pg>
If the percentage values in the right of the summary table are 100%, this indicates that all
signal bits toggled from a value of 0 to 1 and back to 0 during simulating (for the
module/instance of this row).  If the values of the percentage are less than 100%, this
indicates that some signal bits did not fully toggle during simulation and full toggle
coverage was not achieved for that module/instance. Note that for a module/instance which
does not contain any signals in which Covered was able to simulate, the values of hit,
miss, and total will be 0 while the hit percentage value will indicate 100%.
</_pg>

<_header3>
Verbose Information Description - Both
</_header3>

<_pg>
If the miss value for a particular module/instance was not 0 (indicating that one or
more signal bits did not fully toggle during simulation) and the '-d v' option was
specified on the command-line (specifying to output verbose reporting information), the
signals that were missed during simulation will be output below the summary information
per module/instance that contained missed signal bit toggles.  In our sample module-based
report, there were seven signals in module "main" (a, b, c, d, e, f, and g) and two signals
in module "foobar" (a and c) that were not fully toggled (see lines
<a href="example.rptM.html#27>27 through 57</a>).  In our sample instance-based report, there
were also seven signals in instance "main" (a, b, c, d, e, f, and g) and two signals in
instance "main.bar" (a and c) that were not fully toggled (see lines
<a href="example.rptI.html#33">33 through 63</a>).
</_pg>

<_pg>
For each signal in the verbose toggle table, the format is the following:
</_pg>

<_margin>Signal toggle verbose output example</_margin>

<_code>
&lt;signal_name&gt;$sp10;0-&gt;1: &lt;binary_value&gt;<br>
.......................1-&gt;0: &lt;binary_value&gt;
</_code>

<_pg>
The name of the signal is specified in the upper left corner.  The bitwise toggle information
for the signal from a value of 0 to a value of 1 is specified in the upper right corner.  The
binary value represents bits in the signal, each bit corresponding to the matching bit of the
signal.  If a bit value is set to the value 1, this indicates that this bit in the signal
toggled from a value of 0 to a value of 1.  If a bit value is set to the value 0, this indicates
that this bit in the signal did NOT toggle from a value of 0 to a value of 1; therefore, full
toggle coverage was not achieved for this signal.  For example, for the signal called "g" in
the module/instance "main", the verbose toggle information looks like:
</_pg>

<_code>
g$sp10;0-&gt;1: 1'b1<br>
...........1-&gt;0: 1'b0
</_code>

<_pg>
This is indicating that bit 0 of the signal called "g" successfully toggled from a value
of 0 to 1 during simulation (because the bit value at bit location 0 is a value of 1).
However, the signal did not toggle from a value of 0 to a value of 1 during simulation,
thus the signal was not considered fully toggled.
</_pg>

<_pg>
It is important to note that the binary values are displayed with the least-significant bit
of the signal being output on the far right of the value while the most-significant bit of
the signal is output on the far left of the value.
</_pg>
