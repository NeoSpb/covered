<!--
[variables]
{
  $page_title = "Combinational Coverage"
  $page_title_english = "Combinational Coverage"
  $file_prev = "005.html"
  $file_next = "007.html"
  $real_page_number = "6"
  $page_number = "6"
}
-->

<_header2>
Combinational Coverage
</_header2>

<_pg>
Combinational logic coverage answers the question, "What 
values did an expression (or subexpression) evaluate to 
(or not evaluate to) during the course of the simulation?"
</_pg>

<_pg>
This type of coverage is extremely useful in determining 
logical combinations of signals that were not tried during 
simulation, exposing potential holes in verification.
</_pg>

<_header3>
Example
</_header3>

<_margin>Example</_margin>

<_pg>
Suppose the DUT comprised of the following module
</_pg>

<_code>
module test;<br>
<br>
reg$sp a;<br>
reg$sp b;<br>
wire c;<br>
<br>
initial<br>
$sp begin<br>
$sp$sp$sp a = 1'b0;<br>
$sp$sp$sp b = 1'b1;<br>
$sp$sp$sp #10;<br>
$sp$sp$sp a = 1'b1;<br>
$sp$sp$sp #10;<br>
$sp end<br>
<br>
assign c = a | b;<br>
<br>
endmodule
</_code>

<_pg>
This module comprises of only one expression:  a | b.  If this
module were simulated it would result in a combinational coverage
value of 50% (2 out of 4).  Can you determine which cases are
not being covered?
</_pg>

<_pg>
The expression "a | b" can result in two values, 0 and 1, but
can do so in four combinations:
</_pg>

<_pg>
<ol>
  <li>a = 0, b = 0, c = 0
  <li>a = 0, b = 1, c = 1
  <li>a = 1, b = 0, c = 1
  <li>a = 1, b = 1, c = 1
</ol>
</_pg>

<_pg>
Noticing the values assigned to a and b during simulation, shows
that combinations (2) and (4) were hit during execution while
combinations (1) and (3) were not (2 out of 4 - 50%).  This also shows us that the
value of c was never 0 during simulation.
</_pg>

<_header3>
Recommendations
</_header3>

<_margin>Recommendations</_margin>

<_pg>
For a design to pass full coverage, it is recommended that 
the combinational logic coverage for all modules be 80% or 
higher.  If the expression coverage for an expression is not 
100%, it is recommended that the verification engineer 
closely examine these missed cases to determine if more 
testing is required.  Sometimes certain combinations of signals 
are unachievable due to design constraints, keeping 
the expression coverage from ever reaching a value of 100% 
but still can be considered fully covered.

</_pg>
