<!--
[variables]
{
  $page_title = "The merge Command"
  $page_title_english = "The merge Command"
  $file_prev = "011.html"
  $file_next = "013.html"
  $real_page_number = "12"
  $page_number = "12"
}
-->

<_header1>
$page_title
</_header1>

<_pg>

</_pg>

<_header2>
Usage
</_header2>

<_pg>
The merge command is initiated with the following call:
</_pg>

<_code>
covered merge [&lt;options&gt;] &lt;existing_CDD&gt; &lt;CDD_to_merge&gt;
</_code>

<_pg>
The <i>existing_CDD</i> specifier relates to any existing CDD.
If the -o option is not specified (see below for details), this
file will be replaced with the merged CDD created by the merge.
This is important to remember since merging is an irreversible
operation (apart from the generating a brand-new CDD from the
design and dumpfile using the score command).
</_pg>

<_pg>
The <i>CDD_to_merge</i> specifier relates to any existing CDD
that is not the <i>existing_CDD</i>.  Though it is not illegal
to merge the same CDD to itself, the result is the same as
the original CDD.  Note that the <i>CDD_to_merge</i> is a file
which is guaranteed to not be modified by the merge command.
The contents of the file are literally read-only by Covered and
are merged into the information contained in the <i>existing_CDD</i>.
</_pg>

<_header2>
Options
</_header2>

<_pg>
The following table lists the options available for the merge
command.
</_pg>

<_block>
<table cellspacing=2 cellpadding=4 border=1>
  <tr>
    <td colspan=2 class="tableHeader">
      Options to merge Command
    </td>
  </tr>
  <tr>
    <td>
      <strong>Option</strong>
    </td>
    <td>
      <strong>Description</strong>
    <td>
  </tr>
  <tr>
    <td>
      -o &lt;<i>filename</i>&gt;
    </td>
    <td>
      Name of CDD to write merged coverage information to (if
not specified, the &lt;<i>existing_CDD</i>&gt; is overwritten with
merged CDD).
    </td>
  </tr>
  <tr>
    <td>
      -h
    </td>
    <td>
      Outputs usage information for the merge command
    </td>
  </tr>
</table><br>
</_block>

<_header2>
Merging Three or More CDDs
</_header2>

<_pg>
Note that it is currently only possible to merge two CDDs at a 
time per merge command, the output CDD of which may be stored 
in the first of the two CDDs or a new CDD.
</_pg>

<_pg>
To merge three or more CDDs, it is recommended that one uniquely
named CDD file (possibly merged.cov or something like it) be
created by an initial merge command (using the -o option -- see
below).  Then all subsequent merge commands would specify the
merged CDD file first followed by the next CDD to merge.  This
would create one CDD file containing the merged contents of
all CDDs created for the specified design.
</_pg>

<_pg>
An example of how to merge four CDDs called "run1.cov",
"run2.cov", "run3.cov" and "run4.cov" into a resulting CDD
called "merged.cov" is as follows:
</_pg>

<_margin>Example 1</_margin>

<_code>
&gt;  ls<br>
run1.cov<br>
run2.cov<br>
run3.cov<br>
run4.cov<br>
<br>
&gt;  covered merge -o merged.cov run1.cov run2.cov<br>
<br>
&gt;  covered merge merged.cov run3.cov<br>
<br>
&gt;  covered merge merged.cov run4.cov
</_code>

<_pg>
Another possible way to merge these files would be to use a
tree-structured merge algorithm that uses intermediate CDDs
to form the final CDD.  This method will use fewer merge calls
but will take slightly more disk space.
</_pg>

<_margin>Example 2</_margin>

<_code>
&gt;  covered merge -o temp1.cov run1.cov run2.cov<br>
<br>
&gt;  covered merge -o temp2.cov run3.cov run4.cov<br>
<br>
&gt;  covered merge -o merged.cov temp1.cov temp2.cov<br>

</_code>

<_pg>
There are, obviously, many more ways to generate a merged report
but are too numerous to list here.  The examples above both
achieve the same result in a fairly optimal manner and provide
a good understanding of how to use the merge command on a large
number of CDDs.
</_pg>
