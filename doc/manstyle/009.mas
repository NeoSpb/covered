<!--
[variables]
{
  $page_title = "Race Condition Checking"
  $page_title_english = "Race Condition Checking"
  $file_prev = "008.html"
  $file_next = "010.html"
  $real_page_number = "9"
  $page_number = "9"
}
-->

<_header1>
$page_title
</_header1>

<_pg>
Due to Covered's method of abstracting coverage from a dumpfile, a partial
"resimulation" of the design is needed to obtain proper statistics for line,
combinational logic and FSM metrics.  Therefore, accurately resimulating 
what occurred in the actual simulation is a requirement for obtaining correct
results.  This can be easily achieved so long as the design doesn't contain
any code that could result in potential race conditions.
</_pg>

<_header2>
Checked Coding Guidelines
</_header2>

<_pg>
To avoid this problem Covered now performs automatic race condition checking
on the specified design after parsing has been completed but before
simulation/scoring is performed.  All statement blocks in the design that
don't adhere to certain coding guidelines are removed from coverage
consideration by Covered.  By following these coding guidelines, a design
should be void of race condition scenarios that would lead to faulty
simulation results.  The following coding guidelines are applied by Covered
when checking for race conditions:
</_pg>

<_margin>Race-condition-free
Coding Guidelines</_margin>

<_pg>
<ol>
  <li> All sequential logic and latches use non-blocking assignments.</li>
  <li> All combinational logic in an always block uses blocking
       assignments.</li>
  <li> All mixed sequential and combinational logic in the same always
       block uses non-blocking assignments.</li>
  <li> Blocking and non-blocking assignments should not be used in the
       same always block.<li>
  <li> Assignments made to a variable should only be done within one
       always block.</li>
  <li> The $strobe system call should only be used to display variables
       that were assigned using non-blocking assignments. (Not currently
       implemented)</li>
  <li> No #0 procedural assignments should exist.  (Not currently
       implemented)</li>
</ol>

</_pg>

<_header2>
Race Condition Handling
</_header2>

<_pg>
If Covered detects an always block as violating any one of the above
mentioned coding guidelines, it will do one of two things depending on
options specified to the score command by the user.
</_pg>

<_pg>
<ol>
  <li> If the -rS, -rW or none of the -r options are specified, Covered will
       simply remove the non-conforming always block from coverage
       consideration and continue with scoring.  -rW will display a message
       describing detected race conditions during the scoring command while
       the -rS option will display no messages.</li>
  <li> If the -rE option is specified, Covered will halt the score command
       after all race condition checking has been performed with a message
       to the user specifying how many always blocks were found to be in
       non-compliance to the race-condition-free coding guidelines.</li>
</ol>
</_pg>

<_pg>
The first mode of operation is the recommended mode of operation as this
will allow Covered to continue calculating coverage information for the
design while still providing accurate coverage information for the logic
that is still under consideration.  The second mode of operation is meant
to allow the user to use Covered as a race-condition checking tool.
</_pg>

<_header2>
Reporting Race Conditions
</_header2>

<_pg>
Even though race condition information is displayed (assuming the -rS option
was not specified in the score command-line) during the scoring process, it
may be convenient to view this information in a generated report as well.
Because of this need, Covered saves all race condition information to the
CDD file for use in using the report command.  By specifying 'r' in the -m
option to the report command (race condition report output is not turned on
by default), the statement blocks which were eliminated from coverage
consideration will be output to the coverage report file.  Summary coverage
will contain the total number of statement blocks eliminated for each
module.  Verbose coverage will contain each eliminated statement block,
organized by module, specifying both the starting line of the eliminated
statement block and the reason for why the statement block was removed.
</_pg>
